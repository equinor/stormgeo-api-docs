components:
  schemas:
    Forecast:
      additionalProperties: false
      properties:
        data:
          nullable: true
        issueTime:
          format: date-time
          nullable: true
          type: string
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        timeResolution:
          nullable: true
          type: string
        type:
          nullable: true
          type: string
        units:
          additionalProperties:
            type: string
          nullable: true
          type: object
      type: object
    Parameter:
      additionalProperties: false
      properties:
        id:
          format: int32
          type: integer
        name:
          nullable: true
          type: string
        unit:
          $ref: '#/components/schemas/Unit'
      type: object
    ParameterDto:
      additionalProperties: false
      properties:
        name:
          nullable: true
          type: string
        unit:
          nullable: true
          type: string
      type: object
    ParameterSetDto:
      additionalProperties: false
      properties:
        description:
          example: A description of the parameter set (Optional).
          nullable: true
          type: string
        id:
          format: int32
          nullable: true
          type: integer
        name:
          example: Parameter set name
          nullable: true
          type: string
        parameters:
          example:
          - windspeed
          - winddirection
          - temperature
          items:
            type: string
          nullable: true
          type: array
      type: object
    ParameterSetPostDto:
      additionalProperties: false
      properties:
        description:
          example: A description of the parameter set (Optional).
          nullable: true
          type: string
        name:
          example: Parameter set name
          nullable: true
          type: string
        parameters:
          example:
          - windspeed
          - winddirection
          - temperature
          items:
            type: string
          nullable: true
          type: array
      type: object
    Point:
      additionalProperties: false
      properties:
        customerId:
          format: int32
          type: integer
        expiry:
          format: date-time
          type: string
        id:
          format: int32
          type: integer
        lastUpdatedForecast:
          format: date-time
          nullable: true
          type: string
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        name:
          nullable: true
          type: string
        timeResolution:
          nullable: true
          type: string
        timeZone:
          nullable: true
          type: string
      type: object
    ProblemDetails:
      additionalProperties: {}
      properties:
        detail:
          nullable: true
          type: string
        instance:
          nullable: true
          type: string
        status:
          format: int32
          nullable: true
          type: integer
        title:
          nullable: true
          type: string
        type:
          nullable: true
          type: string
      type: object
    Threshold:
      additionalProperties: false
      properties:
        customerId:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        levels:
          items:
            $ref: '#/components/schemas/ThresholdLevel'
          nullable: true
          type: array
        name:
          nullable: true
          type: string
      type: object
    ThresholdItem:
      additionalProperties: false
      properties:
        id:
          format: int32
          type: integer
        operator:
          nullable: true
          type: string
        parameter:
          $ref: '#/components/schemas/Parameter'
        unit:
          $ref: '#/components/schemas/Unit'
        value:
          format: double
          type: number
        valueEnd:
          format: double
          nullable: true
          type: number
      type: object
    ThresholdItemPostDto:
      additionalProperties: false
      properties:
        id:
          format: int32
          type: integer
        operator:
          description: 'choose one of the values: "BETWEEN","<","<=",">",">=","==","="'
          example: '>='
          nullable: true
          type: string
        parameter:
          nullable: true
          type: string
        unit:
          nullable: true
          type: string
        value:
          format: double
          type: number
        valueEnd:
          description: use only for "between" operator
          format: double
          nullable: true
          type: number
      type: object
    ThresholdLevel:
      additionalProperties: false
      properties:
        colour:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        groups:
          items:
            $ref: '#/components/schemas/ThresholdLevelGroup'
          nullable: true
          type: array
        id:
          format: int32
          type: integer
        severity:
          format: int32
          type: integer
        thresholdId:
          format: int32
          type: integer
      type: object
    ThresholdLevelGroup:
      additionalProperties: false
      properties:
        id:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/ThresholdItem'
          nullable: true
          type: array
        name:
          nullable: true
          type: string
      type: object
    ThresholdLevelGroupPostDto:
      additionalProperties: false
      properties:
        items:
          items:
            $ref: '#/components/schemas/ThresholdItemPostDto'
          nullable: true
          type: array
        name:
          nullable: true
          type: string
      type: object
    ThresholdLevelPostDto:
      additionalProperties: false
      properties:
        colour:
          description: Hexadecimal color code
          example: '#000000'
          nullable: true
          pattern: ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
          type: string
        description:
          nullable: true
          type: string
        groups:
          items:
            $ref: '#/components/schemas/ThresholdLevelGroupPostDto'
          nullable: true
          type: array
        severity:
          format: int32
          type: integer
      type: object
    ThresholdPostDto:
      additionalProperties: false
      properties:
        levels:
          items:
            $ref: '#/components/schemas/ThresholdLevelPostDto'
          nullable: true
          type: array
        name:
          example: Threshold name
          nullable: true
          type: string
      type: object
    Unit:
      additionalProperties: false
      properties:
        id:
          format: int32
          type: integer
        name:
          nullable: true
          type: string
      type: object
    UnitDto:
      additionalProperties: false
      properties:
        baseUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UnitProfileDto:
      additionalProperties: false
      properties:
        id:
          format: int32
          type: integer
        name:
          example: Unit profile name
          nullable: true
          type: string
        parameterUnits:
          additionalProperties:
            type: string
          example:
            temperature: fahrenheit
            windspeed: knots
          nullable: true
          type: object
      type: object
    UnitProfilePostDto:
      additionalProperties: false
      properties:
        name:
          example: Unit profile name
          nullable: true
          type: string
        parameterUnits:
          additionalProperties:
            type: string
          example:
            temperature: fahrenheit
            windspeed: knots
          nullable: true
          type: object
      type: object
  securitySchemes:
    apiKeyHeader:
      in: header
      name: Ocp-Apim-Subscription-Key
      type: apiKey
    apiKeyQuery:
      in: query
      name: subscription-key
      type: apiKey
info:
  description: "The StormGeo API exposes functionality related to the weather of predefined\
    \ locations, or given coordinates. The API is available to Equinor employees,\
    \ and certain subcontractors. \n# Introduction\n The API is designed and built\
    \ according to [Equinor's API strategy](https://github.com/equinor/api-strategy).\n\
    The API is documented in OpenAPI 3.0 format and follows REST principles.\n\nA\
    \ simple way to test the API is through [Postman](https://www.postman.com/) which\
    \ is accessible through AccessIT.\n ## Data Sources\nThe API functions as a gateway\
    \ to StormGeo's own weather API, creating a unified way for Equinor employees\
    \ and third parties to access this resource.\n ## Authentication and Authorization\
    \ Overview\n The user executing the API requests will need to authenticate with\
    \ OAuth 2.0 authorization code flow with Equinor Azure AD as the identity provider.<br><br>\
    \ \n For application permissions there is an Equinor role for internal application\
    \ access, and the possibility for external connections through a restricted version\
    \ of the API.\n # Client Setup\n In order to call the StormGeo API, a client application\
    \ needs to be configured with permission to call the StormGeo API on behalf of\
    \ the logged in user in Equinor Azure AD, or have an application permission.\n\
    \nThe following configuration steps needs to be performed for the initial setup:\n\
    \n1. Create client app registration in Equinor Azure AD through [portal.azure.com](https://portal.azure.com)\
    \ for each environment of your solution. This step requires the [Application Developer\
    \ role](https://accessit.equinor.com/Search/Search?term=Application+Developer+%28AZURE+ACTIVE+DIRECTORY%29)\
    \ in Access IT. See Omnia documentation [Application Management in AAD](https://docs.omnia.equinor.com/governance/iam/App-General-Info/)\
    \ for more information.\n  We recommend one client app registration pr client\
    \ environment such as dev, qa and production.\n\n1. Create client secrets for\
    \ your client app registrations\n1. Add an API permission for the app registrations\
    \ towards the StormGeo API. The following API names are used with application\
    \ id in parenthesis: Weatherforecast api prod (81707c90-2ec8-4b00-8447-5a5fbbceb3e8),\
    \ Weatherforecast api test (bad0664a-3c4b-4f42-a8de-d12d82ea586c), \n1. Trigger\
    \ an authentication request through a http client (such as postman) in order to\
    \ trigger the consent process of the API permission\n\nWe recommend using Postman\
    \ as a tool for experimenting with the API.\n\n## HTTP Response codes\nHTTP response\
    \ codes will follow established best practice for REST services and will be documented\
    \ in the OpenAPI specification. \n\nBelow is a list of status codes used in the\
    \ API which the client should handle. \nCommon: \n* 400 Bad Request - The request\
    \ is invalid. For example missing parameters in the query string\n* 401 Unauthorized\
    \ - The request did not include an authentication token or the authentication\
    \ token was expired or invalid\n* 403 Forbidden - User does not have sufficient\
    \ permissions\n* 404 Not Found - The resource does not exist or an non-existing\
    \ endpoint has been called\n\nRead - HTTP GET:\n* 200 OK - The request completed\
    \ successfully\n\n"
  title: StormGeo
  version: v1
openapi: 3.0.1
paths:
  /api-first-workbench/forecasts:
    get:
      description: Returns all forecasts for a specific location.
      operationId: get-forecasts
      parameters:
      - description: Format - double. Format - double. The longitude of the location
        in: query
        name: longitude
        required: true
        schema:
          format: double
          type: number
      - description: Format - double. Format - double. The latitude of the location
        in: query
        name: latitude
        required: true
        schema:
          format: double
          type: number
      - description: Format - int32. Format - int32. The id of the parameter set to
          use. Default temperature and wind speed and dirction.
        in: query
        name: parameterSetId
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. The id of the unit profile to
          use. Default metric units.
        in: query
        name: unitProfileId
        schema:
          format: int32
          type: integer
      - description: Timeresoltion for the forecast. Defines how many timesteps of
          each duration is returned. Eg. "1=48,3=24" means 48 x 1 hour steps, then
          24 x 3 hour steps. Available step sizes are 1,3,6,12 and 24. Just 1 means
          1 hour timesteps until 66 hours, just 3 means then 3 hour timesteps until
          120 hours, just 6 means then 6 hour timesteps until 168 hours. Eg. "3=24,6"
          means 24 x 3 hour timesteps, then 16 x 6 hour timesteps (total 168 hours).
        in: query
        name: timeResolution
        schema:
          default: 1,3,6
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
              - data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                items:
                  $ref: '#/components/schemas/Forecast'
                type: array
            text/json:
              example:
              - data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                items:
                  $ref: '#/components/schemas/Forecast'
                type: array
            text/plain:
              examples:
                default:
                  value: null
              schema:
                items:
                  $ref: '#/components/schemas/Forecast'
                type: array
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
      summary: Returns all forecasts for a specific location.
      tags:
      - Weather
  /api-first-workbench/forecasts/{forecastType}:
    get:
      description: Returns all forecasts for a specific location.
      operationId: get-weather-api-forecasts-forecasttype
      parameters:
      - description: 'The type forecast. Available types: "model".'
        in: path
        name: forecastType
        required: true
        schema:
          type: string
      - description: Format - double. Format - double. The longitude of the location
        in: query
        name: longitude
        required: true
        schema:
          format: double
          type: number
      - description: Format - double. Format - double. The latitude of the location
        in: query
        name: latitude
        required: true
        schema:
          format: double
          type: number
      - description: Format - int32. Format - int32. The id of the parameter set to
          use. Default temperature and wind speed and dirction.
        in: query
        name: parameterSetId
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. The id of the unit profile to
          use. Default metric units.
        in: query
        name: unitProfileId
        schema:
          format: int32
          type: integer
      - description: Timeresolution for the forecast. Defines how many timesteps of
          each duration is returned. Eg. "1=48,3=24" means 48 x 1 hour steps, then
          24 x 3 hour steps. Available step sizes are 1,3,6,12 and 24. Just 1 means
          1 hour timesteps until 66 hours, just 3 means then 3 hour timesteps until
          120 hours, just 6 means then 6 hour timesteps until 168 hours. Eg. "3=24,6"
          means 24 x 3 hour timesteps, then 16 x 6 hour timesteps (total 168 hours).
        in: query
        name: timeResolution
        schema:
          default: 1,3,6
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                $ref: '#/components/schemas/Forecast'
            text/json:
              example:
                data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                $ref: '#/components/schemas/Forecast'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/Forecast'
          description: Success
        '400':
          content:
            application/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
      summary: Returns all forecasts for a specific location.
      tags:
      - Weather
  /api-first-workbench/locations:
    get:
      description: Returns a list of available locations.
      operationId: get-locations
      parameters:
      - description: "Filters is a comma-delimited list of {Name}{Operator}{Value}\
          \ where \r\n- {Name} is the name of the property. Multiple names (logial\
          \ OR) can be entered pipe delimited, eg. \"(value1|value2)>10\" will filter\
          \ items where value1 or value2 is greater than 10.\r\n- {Value} is the value\
          \ used for filtering. Multiple values (logial OR) can be entered pipe delimited,\
          \ eg. \"value@=foo|bar\" will filter items where value contains either \"\
          foo\" or \"bar\".\r\n- {Operator} is one of the following operators:\r\n\
          \r\n| Operator | Name |\r\n|-|---|\r\n| == | Equals | \r\n| != | Not equal\
          \ | \r\n| > | Greater than | \r\n| < | Less than | \r\n| >= | Greater than\
          \ or equal to | \r\n| <= | Less than or equal to | \r\n| @= | Contains |\
          \ \r\n| _= | Starts with | \r\n| !@= | Does not contain | \r\n| !_= | Does\
          \ not start with |"
        in: query
        name: Filters
        schema:
          type: string
      - description: Sorts is a comma delimited ordered list of proprty names to sort
          by. Prefix with "-" to sort descending.
        in: query
        name: Sorts
        schema:
          type: string
      - description: Format - int32. Format - int32. Number of items per page. Default
          no limit.
        in: query
        name: PageSize
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. Number of page to return. Default
          1.
        in: query
        name: Page
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example:
              - customerId: 0
                expiry: string
                id: 0
                lastUpdatedForecast: string
                latitude: 0
                longitude: 0
                name: string
                timeResolution: string
                timeZone: string
              schema:
                items:
                  $ref: '#/components/schemas/Point'
                type: array
            text/json:
              example:
              - customerId: 0
                expiry: string
                id: 0
                lastUpdatedForecast: string
                latitude: 0
                longitude: 0
                name: string
                timeResolution: string
                timeZone: string
              schema:
                items:
                  $ref: '#/components/schemas/Point'
                type: array
            text/plain:
              examples:
                default:
                  value: null
              schema:
                items:
                  $ref: '#/components/schemas/Point'
                type: array
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Returns a list of available locations.
      tags:
      - Locations
  /api-first-workbench/locations/{id}:
    get:
      description: Returns  information on a specific location.
      operationId: get-locations-id
      parameters:
      - description: Format - int32. Format - int32. The id of the location
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example:
                customerId: 0
                expiry: string
                id: 0
                lastUpdatedForecast: string
                latitude: 0
                longitude: 0
                name: string
                timeResolution: string
                timeZone: string
              schema:
                $ref: '#/components/schemas/Point'
            text/json:
              example:
                customerId: 0
                expiry: string
                id: 0
                lastUpdatedForecast: string
                latitude: 0
                longitude: 0
                name: string
                timeResolution: string
                timeZone: string
              schema:
                $ref: '#/components/schemas/Point'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/Point'
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
      summary: Returns  information on a specific location.
      tags:
      - Locations
  /api-first-workbench/locations/{id}/forecasts:
    get:
      description: Returns all forecasts for a specific location.
      operationId: get-locations-id-forecasts
      parameters:
      - description: Format - int32. Format - int32. The id of the location
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. The id of the parameter set to
          use. Default temperature and wind speed and dirction.
        in: query
        name: parameterSetId
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. The id of the unit profile to
          use. Default metric units.
        in: query
        name: unitProfileId
        schema:
          format: int32
          type: integer
      - description: Timeresoltion for the forecast. Defines how many timesteps of
          each duration is returned. Eg. "1=48,3=24" means 48 x 1 hour steps, then
          24 x 3 hour steps. Available step sizes are 1,3,6,12 and 24. Just 1 means
          1 hour timesteps until 66 hours, just 3 means then 3 hour timesteps until
          120 hours, just 6 means then 6 hour timesteps until 168 hours. Eg. "3=24,6"
          means 24 x 3 hour timesteps, then 16 x 6 hour timesteps (total 168 hours).
        in: query
        name: timeResolution
        schema:
          default: 1,3,6
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
              - data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                items:
                  $ref: '#/components/schemas/Forecast'
                type: array
            text/json:
              example:
              - data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                items:
                  $ref: '#/components/schemas/Forecast'
                type: array
            text/plain:
              examples:
                default:
                  value: null
              schema:
                items:
                  $ref: '#/components/schemas/Forecast'
                type: array
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
      summary: Returns all forecasts for a specific location.
      tags:
      - Locations
  /api-first-workbench/locations/{id}/forecasts/{forecastType}:
    get:
      description: Returns a specific forecast for a specific location.
      operationId: get-locations-id-forecasts-forecasttype
      parameters:
      - description: Format - int32. Format - int32. The id of the location
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: 'The type forecast. Available types: "model", "corrected".'
        in: path
        name: forecastType
        required: true
        schema:
          type: string
      - description: Format - int32. Format - int32. The id of the parameter set to
          use. Default temperature and wind speed and dirction.
        in: query
        name: parameterSetId
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. The id of the unit profile to
          use. Default metric units.
        in: query
        name: unitProfileId
        schema:
          format: int32
          type: integer
      - description: Timeresoltion for the forecast. Defines how many timesteps of
          each duration is returned. Eg. "1=48,3=24" means 48 x 1 hour steps, then
          24 x 3 hour steps. Available step sizes are 1,3,6,12 and 24. Just 1 means
          1 hour timesteps until 66 hours, just 3 means then 3 hour timesteps until
          120 hours, just 6 means then 6 hour timesteps until 168 hours. Eg. "3=24,6"
          means 24 x 3 hour timesteps, then 16 x 6 hour timesteps (total 168 hours).
        in: query
        name: timeResolution
        schema:
          default: 1,3,6
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                $ref: '#/components/schemas/Forecast'
            text/json:
              example:
                data: {}
                issueTime: string
                latitude: 0
                longitude: 0
                timeResolution: string
                type: string
                units: {}
              schema:
                $ref: '#/components/schemas/Forecast'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/Forecast'
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              example:
                detail: string
                instance: string
                status: 0
                title: string
                type: string
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              examples:
                default:
                  value: null
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Not Found
      summary: Returns a specific forecast for a specific location.
      tags:
      - Locations
  /api-first-workbench/locations/{id}/threshold/{thresholdId}:
    get:
      description: Returns asset state based on location and threshold
      operationId: get-locations-id-threshold-thresholdid
      parameters:
      - description: Format - int32. Format - int32. The id of the location
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - description: Format - int32. Format - int32. The id of the threshold
        in: path
        name: thresholdId
        required: true
        schema:
          format: int32
          type: integer
      - description: Hexacode string, representing the threshold levels, if not empty
          it will overwrite default colours.
        in: query
        name: thresholdColors
        schema:
          type: string
      - description: Timeresolution for the forecast. Defines how many timesteps of
          each duration is returned. Eg. "1=48,3=24" means 48 x 1 hour steps, then
          24 x 3 hour steps. Available step sizes are 1,3,6,12 and 24. Just 1 means
          1 hour timesteps until 66 hours, just 3 means then 3 hour timesteps until
          120 hours, just 6 means then 6 hour timesteps until 168 hours. Eg. "3=24,6"
          means 24 x 3 hour timesteps, then 16 x 6 hour timesteps (total 168 hours).
        in: query
        name: timeResolution
        schema:
          default: 1,3,6
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Returns asset state based on location and threshold
      tags:
      - Locations
  /api-first-workbench/parameter-sets:
    get:
      description: Retruns available parameter sets
      operationId: get-parameter-sets
      parameters:
      - description: "Filters is a comma-delimited list of {Name}{Operator}{Value}\
          \ where \r\n- {Name} is the name of the property. Multiple names (logial\
          \ OR) can be entered pipe delimited, eg. \"(value1|value2)>10\" will filter\
          \ items where value1 or value2 is greater than 10.\r\n- {Value} is the value\
          \ used for filtering. Multiple values (logial OR) can be entered pipe delimited,\
          \ eg. \"value@=foo|bar\" will filter items where value contains either \"\
          foo\" or \"bar\".\r\n- {Operator} is one of the following operators:\r\n\
          \r\n| Operator | Name |\r\n|-|---|\r\n| == | Equals | \r\n| != | Not equal\
          \ | \r\n| > | Greater than | \r\n| < | Less than | \r\n| >= | Greater than\
          \ or equal to | \r\n| <= | Less than or equal to | \r\n| @= | Contains |\
          \ \r\n| _= | Starts with | \r\n| !@= | Does not contain | \r\n| !_= | Does\
          \ not start with |"
        in: query
        name: Filters
        schema:
          type: string
      - description: Sorts is a comma delimited ordered list of proprty names to sort
          by. Prefix with "-" to sort descending.
        in: query
        name: Sorts
        schema:
          type: string
      - description: Number of items per page. Default no limit.
        in: query
        name: PageSize
        schema:
          type: string
      - description: Number of page to return. Default 1.
        in: query
        name: Page
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Retruns available parameter sets
  /api-first-workbench/parameter-sets/{id}:
    get:
      description: Retruns information on a specific parameter set
      operationId: get-parameter-sets-id
      parameters:
      - description: The id of the parameter set
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Retruns information on a specific parameter set
  /api-first-workbench/parameters:
    get:
      description: Returns a list of available parameters to use with parameter sets.
      operationId: get-parameters
      parameters:
      - description: "Filters is a comma-delimited list of {Name}{Operator}{Value}\
          \ where \r\n- {Name} is the name of the property. Multiple names (logial\
          \ OR) can be entered pipe delimited, eg. \"(value1|value2)>10\" will filter\
          \ items where value1 or value2 is greater than 10.\r\n- {Value} is the value\
          \ used for filtering. Multiple values (logial OR) can be entered pipe delimited,\
          \ eg. \"value@=foo|bar\" will filter items where value contains either \"\
          foo\" or \"bar\".\r\n- {Operator} is one of the following operators:\r\n\
          \r\n| Operator | Name |\r\n|-|---|\r\n| == | Equals | \r\n| != | Not equal\
          \ | \r\n| > | Greater than | \r\n| < | Less than | \r\n| >= | Greater than\
          \ or equal to | \r\n| <= | Less than or equal to | \r\n| @= | Contains |\
          \ \r\n| _= | Starts with | \r\n| !@= | Does not contain | \r\n| !_= | Does\
          \ not start with |"
        in: query
        name: Filters
        schema:
          type: string
      - description: Sorts is a comma delimited ordered list of proprty names to sort
          by. Prefix with "-" to sort descending.
        in: query
        name: Sorts
        schema:
          type: string
      - description: Number of items per page. Default no limit.
        in: query
        name: PageSize
        schema:
          type: string
      - description: Number of page to return. Default 1.
        in: query
        name: Page
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Returns a list of available parameters to use with parameter sets.
  /api-first-workbench/parameters/{name}:
    get:
      description: Retruns information on a specific parameter
      operationId: get-parameters-name
      parameters:
      - description: The name of the parameter
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Retruns information on a specific parameter
  /api-first-workbench/threshold:
    get:
      description: /threshold - get
      operationId: get-threshold
      parameters:
      - description: "Filters is a comma-delimited list of {Name}{Operator}{Value}\
          \ where \r\n- {Name} is the name of the property. Multiple names (logial\
          \ OR) can be entered pipe delimited, eg. \"(value1|value2)>10\" will filter\
          \ items where value1 or value2 is greater than 10.\r\n- {Value} is the value\
          \ used for filtering. Multiple values (logial OR) can be entered pipe delimited,\
          \ eg. \"value@=foo|bar\" will filter items where value contains either \"\
          foo\" or \"bar\".\r\n- {Operator} is one of the following operators:\r\n\
          \r\n| Operator | Name |\r\n|-|---|\r\n| == | Equals | \r\n| != | Not equal\
          \ | \r\n| > | Greater than | \r\n| < | Less than | \r\n| >= | Greater than\
          \ or equal to | \r\n| <= | Less than or equal to | \r\n| @= | Contains |\
          \ \r\n| _= | Starts with | \r\n| !@= | Does not contain | \r\n| !_= | Does\
          \ not start with |"
        in: query
        name: Filters
        schema:
          type: string
      - description: Sorts is a comma delimited ordered list of proprty names to sort
          by. Prefix with "-" to sort descending.
        in: query
        name: Sorts
        schema:
          type: string
      - description: Number of items per page. Default no limit.
        in: query
        name: PageSize
        schema:
          type: string
      - description: Number of page to return. Default 1.
        in: query
        name: Page
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: /threshold - get
  /api-first-workbench/threshold/{id}:
    get:
      description: /threshold/{id} - get
      operationId: get-threshold-id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: format
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: /threshold/{id} - get
  /api-first-workbench/unit-profiles:
    get:
      description: Retruns available unit profiles
      operationId: get-unit-profiles
      parameters:
      - description: "Filters is a comma-delimited list of {Name}{Operator}{Value}\
          \ where \r\n- {Name} is the name of the property. Multiple names (logial\
          \ OR) can be entered pipe delimited, eg. \"(value1|value2)>10\" will filter\
          \ items where value1 or value2 is greater than 10.\r\n- {Value} is the value\
          \ used for filtering. Multiple values (logial OR) can be entered pipe delimited,\
          \ eg. \"value@=foo|bar\" will filter items where value contains either \"\
          foo\" or \"bar\".\r\n- {Operator} is one of the following operators:\r\n\
          \r\n| Operator | Name |\r\n|-|---|\r\n| == | Equals | \r\n| != | Not equal\
          \ | \r\n| > | Greater than | \r\n| < | Less than | \r\n| >= | Greater than\
          \ or equal to | \r\n| <= | Less than or equal to | \r\n| @= | Contains |\
          \ \r\n| _= | Starts with | \r\n| !@= | Does not contain | \r\n| !_= | Does\
          \ not start with |"
        in: query
        name: Filters
        schema:
          type: string
      - description: Sorts is a comma delimited ordered list of proprty names to sort
          by. Prefix with "-" to sort descending.
        in: query
        name: Sorts
        schema:
          type: string
      - description: Number of items per page. Default no limit.
        in: query
        name: PageSize
        schema:
          type: string
      - description: Number of page to return. Default 1.
        in: query
        name: Page
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Retruns available unit profiles
  /api-first-workbench/unit-profiles/{id}:
    get:
      description: Returns a specific unit profile
      operationId: get-unit-profiles-id
      parameters:
      - description: The id of the unit profile
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Returns a specific unit profile
  /api-first-workbench/units:
    get:
      description: Retruns available units
      operationId: get-units
      parameters:
      - description: "Filters is a comma-delimited list of {Name}{Operator}{Value}\
          \ where \r\n- {Name} is the name of the property. Multiple names (logial\
          \ OR) can be entered pipe delimited, eg. \"(value1|value2)>10\" will filter\
          \ items where value1 or value2 is greater than 10.\r\n- {Value} is the value\
          \ used for filtering. Multiple values (logial OR) can be entered pipe delimited,\
          \ eg. \"value@=foo|bar\" will filter items where value contains either \"\
          foo\" or \"bar\".\r\n- {Operator} is one of the following operators:\r\n\
          \r\n| Operator | Name |\r\n|-|---|\r\n| == | Equals | \r\n| != | Not equal\
          \ | \r\n| > | Greater than | \r\n| < | Less than | \r\n| >= | Greater than\
          \ or equal to | \r\n| <= | Less than or equal to | \r\n| @= | Contains |\
          \ \r\n| _= | Starts with | \r\n| !@= | Does not contain | \r\n| !_= | Does\
          \ not start with |"
        in: query
        name: Filters
        schema:
          type: string
      - description: Sorts is a comma delimited ordered list of proprty names to sort
          by. Prefix with "-" to sort descending.
        in: query
        name: Sorts
        schema:
          type: string
      - description: Number of items per page. Default no limit.
        in: query
        name: PageSize
        schema:
          type: string
      - description: Number of page to return. Default 1.
        in: query
        name: Page
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Retruns available units
  /api-first-workbench/units/{name}:
    get:
      description: Returns a specific unit
      operationId: get-units-name
      parameters:
      - description: The name of the unit
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      summary: Returns a specific unit
security:
- apiKeyHeader: []
- apiKeyQuery: []
servers:
- url: https://api-dev.gateway.equinor.com/stormgeo/v1
- url: https://api-ncc-dev.gateway.equinor.com/stormgeo/v1
